<div class="max-w-6xl mx-auto px-4 py-12" x-data="{ show_new_address_modal: false }">
  <div class="flex flex-col md:flex-row items-center justify-between my5 gap-4">
    <h1 class="text-2xl font-bold text-gray-700">Addresses</h1>
    <button x-on:click="show_new_address_modal = true" type="button" class="text-white font-medium bg-gray-700 hover:bg-gray-900 px-6 py-2">Create new address</button>
    <a href="{{ routes.account_url }}" class="text-blue-600 hover:text-blue-800 font-medium underline">Back to account</a>
  </div>

  <div x-show="show_new_address_modal" class="h-full w-full fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto z-50">
    <div class="relative max-w-md mx-auto bg-white border top-20 p-4">
      <div class="flex items-center justify-between mb-4">
        <h2 class="text-lg font-medium">New address</h2>
        <button x-on:click="show_new_address_modal = false" class="text-gray-500">{% render 'icon-close' %}</button>
      </div>

      {% render 'address-form', address: customer.new_address  %}
    </div>
  </div>
  <div>
    {% paginate customer.addresses by 10 %}
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 lg:gap-12 p-4 md:p-12">
        {% for address in customer.addresses %}
          <div x-data="{ address_{{ address.id }}: false}">
            <div class="relative flex flex-col text-center border p-2 h-full">
              {% if address == customer.default_address %}
                <span class="text-xs font-medium text-white bg-green-700 px-4 py-2">Default</span>
              {% endif %}

              <div class="my-8 h-full">
                {{ address | format_address }}
              </div>

              <div class="flex flex-row gap-2">
                <button x-on:click="address_{{ address.id }} = true" class="w-full text-xs text-white bg-gray-700 hover:bg-gray-900 font-medium py-2">Edit</button>
                <button
                  class="w-full text-xs font-medium text-gray-700 border py-2"
                  data-delete-address
                  data-url="{{ address.url }}"
                >
                  Delete
                </button>
              </div>

              <form action="{{ address.url}}" method="post">
                <input type="hidden" name="_method" value="delete">
              </form>
            </div>

            <div x-show="address_{{ address.id }}" class="h-full w-full fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto z-50">
              <div class="relative max-w-md mx-auto bg-white border top-20 bottom-20 p-4">
                <div class="flex items-center justify-between mb-4">
                  <h2 class="text-lg font-medium">Edit address</h2>
                  <button x-on:click="address_{{ address.id }} = false" class="text-gray-500">{% render 'icon-close' %}</button>
                </div>

                {% render 'address-form', address: address, mode: 'edit'  %}
              </div>
            </div>
          </div>
        {% endfor %}
      </div>
    {% endpaginate %}
  </div>
</div>

<script>
  class CustomerAddress {
    constructor() {
      this.initCustomerAddress();
      this.customerAddressesSelector();
      this.initDeleteAddressButtons();
    }

    initCustomerAddress() {
      const allAddressesSelector = document.querySelectorAll("select[data-country-selector]");

      if (allAddressesSelector.length < 1) return;

      allAddressesSelector.forEach((select) => {
        const selectedCountry = this.getSelectedCountry(select);

        if (!selectedCountry) return;

        const provinces  = selectedCountry.dataset.provinces;
        const arrayOfProvinces = JSON.parse(provinces);

        const provinceSelector = document.querySelector(`#address_province_${select.dataset.id}`);

        if (arrayOfProvinces.length < 1) {
          provinceSelector.setAttribute('disabled', 'disabled');
        } else {
          provinceSelector.removeAttribute('disabled');
        }

        provinceSelector.innerHTML = '';
        let options = '';
        for (let index = 0; index < arrayOfProvinces.length; index++) {
          if (arrayOfProvinces[index][0] === provinceSelector.getAttribute('value')) {
            options += `<option value="${arrayOfProvinces[index][0]}" selected>${arrayOfProvinces[index][0]}</option>`
          } else {
            options += `<option value="${arrayOfProvinces[index][0]}">${arrayOfProvinces[index][0]}</option>`
          }
        }

        provinceSelector.innerHTML = options;
      })
    }

    getSelectedCountry(select) {
      let option, selectedOption;
      for (let index = 0; index < select.options.length; index++) {
        option = select.options[index];

        if (option.value === select.getAttribute('value')) {
          selectedOption = option;
          selectedOption.setAttribute('selected', 'selected');
          break;
        }
      }

      return selectedOption;
    }

    customerAddressesSelector() {
      const addressesSelector = document.querySelectorAll("select[data-country-selector]");

      if (addressesSelector.length < 1) return;

      addressesSelector.forEach((select) => {
        select.addEventListener('change', function(e) {
          const provinces = this.options[this.selectedIndex].dataset.provinces;
          const arrayOfProvinces = JSON.parse(provinces);

          const provinceSelector = document.querySelector(`#address_province_${this.dataset.id}`);

          if (arrayOfProvinces.length < 1) {
            provinceSelector.setAttribute('disabled', 'disabled');
          } else {
            provinceSelector.removeAttribute('disabled');
          }

          provinceSelector.innerHTML = '';
          let options = '';
          for (let index = 0; index < arrayOfProvinces.length; index++) {
            options += `<option value="${arrayOfProvinces[index][0]}">${arrayOfProvinces[index][0]}</option>`;
          }

          provinceSelector.innerHTML = options;
        })
      })
    }

    initDeleteAddressButtons() {
      const deleteButtons = document.querySelectorAll("button[data-delete-address]");

      if (deleteButtons.length < 1) return;

      deleteButtons.forEach((button) => {
        button.addEventListener("click", function(e) {
          const url = this.dataset.url;

          const confirmed = window.confirm("Are you sure you want to delete this address?");

          if (confirmed) {
            document.querySelector(`form[action="${url}"]`).submit();
          }
        })
      })
    }
  }

  const customerAddress = new CustomerAddress();
</script>